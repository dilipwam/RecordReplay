class jQueryTranslator {

    //pass in an options object which can take new languages
    constructor(options) {
        
        // set default values for the keycodes class 
        const defaults = {

            //internal defaults
            recordingTestUrl: "",
            recordingTestID: 0,
            //messaging for code
            standardRecordingComment: "/*\n" 
            + "\t This is jQuery code generated by Record/Replay from a RECORDING. \n"
            + "\t As such it only contains ACTIONS, not ASSERTIONS.\n"
            + "\t If you want to have code with assertions included, you need to generate a replay of this recording and download the replay code.\n"
            + "*/\n\n"

        }
        // create a new object with the defaults over-ridden by the options passed in
        let opts = Object.assign({}, defaults, options);
  
        // assign options to instance data (using only property names contained in defaults object to avoid copying properties we don't want)
        Object.keys(defaults).forEach(prop => { this[prop] = opts[prop]; });
    }

    //FORMATTING
    openAnonAsyncFunction = () => `(async ($) => { \n`

    closeAnonAsyncFunction = () => `\n})(jQuery);` 

    openTimedFunction = () => `\n\tawait new Promise(resolve => setTimeout({`

    closeTimedFunction = (delay) => `\n\t\t resolve(); \n\t}, ${delay}));\n`

    //ACTIONS

    mouseClick = (selector, clicktype) => {
        switch(clicktype) {
            case 'click': return ` $('${selector}').click(); `
            case 'dblclick': return ` $('${selector}').dblclick(); `
            case 'contextmenu': return ` $('${selector}').contextmenu(); `
            default: return `  `
        }
    }

    inputText = (selector, text) => ` $('${selector}').val('${text}'); `

    //Note you should always focus before you send key as tab, enter etc may only have meaning in the context of focus
    sendSpecialKey = keyCode => ` jQuery.event.trigger({ type: 'keydown', which: ${keyCode} }); `

    scrollTo = (xPosition, yPosition) => ` $('html').animate({ scrollLeft: ${xPosition}, scrollTop: ${yPosition} }, 500); `

    focus = selector => ` $('${selector}').focus(); `

    hover = selector => ` $('${selector}').mouseenter(); `


    //ASSERTIONS HELPERS
    getTitle = (selector='document', index) => selector == 'document' ? ` const title${index} = $(document).attr('title'); ` : ` const title${index} = $('${selector}').attr('title'); `

    querySelector = (selector, index) => ` const $selected${index} = $('${selector}').first(); `

    querySelectorAll = selector => ` const $selected${index} = $('${selector}'); `

    countElements = (selector, index) => ` const $count${index} = $('${selector}').length; `

    getElementProperty = (selector, property, index) => ` const $property${index} = $('${selector}').prop('${property}'); `

    getElementAttributeValue = (selector, attribute, index) => ` const ${attribute}$Attribute${index} = $('${selector}').attr('${attribute}'); `

    getElementAttributesAsArray = (selector, index) => ` const attributesArray${index} = Array.prototype.slice.call(document.querySelector('${selector}').attributes); `

  
}