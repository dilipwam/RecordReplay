class jQueryTranslator {

    //pass in an options object which can take new languages
    constructor(options) {
        
        // set default values for the keycodes class 
        const defaults = {

            //internal defaults
            recordingTestUrl: "",
            recordingTestID: 0,
            //messaging for code
            standardRecordingComment: "/*\n" 
            + "\t This is jQuery code generated by Record/Replay from a RECORDING. \n"
            + "\t As such it only contains ACTIONS, not ASSERTIONS.\n"
            + "\t If you want to have code with assertions included, you need to generate a replay of this recording and download the replay code.\n"
            + "*/\n\n"

        }
        // create a new object with the defaults over-ridden by the options passed in
        let opts = Object.assign({}, defaults, options);
  
        // assign options to instance data (using only property names contained in defaults object to avoid copying properties we don't want)
        Object.keys(defaults).forEach(prop => { this[prop] = opts[prop]; });
    }

    //FORMATTING
    openAnonAsyncFunction = () => ``

    closeAnonAsyncFunction = () => `` 

    //ACTIONS

    mouseClick = (selector, clicktype) => `  `

    inputText = (selector, text) => ` $('${selector}').val('${text}'); `

    //Note you should always focus before you send key as tab, enter etc may only have meaning in the context of focus
    sendSpecialKey = keyDescriptor => `  `

    scrollTo = (xPosition, yPosition) => `  `

    focus = selector => `  `

    hover = selector => `  `


    //ASSERTIONS HELPERS
    getTitle = (selector='document', index) => ` `

    querySelector = (selector, index) => `  `

    querySelectorAll = selector => `  `

    countElements = (selector, index) => `  `

    getElementProperty = (selector, property, index) => `  `

    getElementAttribute = (selector, attribute, index) => `  `

    getElementAttributesAsArray = (selector, index) => `   `

  
}