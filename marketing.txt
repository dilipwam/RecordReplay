WHAT DOES IT DO?

As you develop your new site or application, before you deploy to production, you want to know that all the key functionality really works.
You don‚Äôt want your users to find the bugs before you do ‚Äî your users will not stick around for long if that happens.
Our automated tests give you this quick feedback on whether your application has broken after making changes to the existing code base. 
As our tests are performed on the actual website, Record/Replay works no matter how you develop your site, be it React, Angular, Vue or some other framework.
We aim to serve all website developers, from those with no programming experience to those with experience of multiple testing suites. 

3 THINGS- focus on the three things that it does: 

RECORD - Listen for all the user interface steps that are required for key functionality to operate, such as signup, login, add purchase to cart etc.

REPLAY - Simulate user behavior (clicking, typing, scrolling etc.) and make sure these scenarios actually work from the point of view of an end user.

REPORT - Generates and displays test progress and results, including visual regression tools to compare your screenshots with previous ones


WHY SHOULD YOU INSTALL IT?

Everyone?

Manual end-to-end functionality testing is time-consuming and tedious. 
Record/Replay delivers easy automation testing to everyone, speeding up delivery of production code you can trust.
This allows the continuous delivery process to run smoothly at your organization with a quality selection of functional tests.

Beginners?

Ready-To-Go- Comes with everything you need to start functional testing.
Ease of use - no installs required, no knowledge of Node.js or Puppeteer required everything runs in the browser, tests saved locally in storage
4. Transparent - watch all the recordings replayed in real time in dedicated browser tab

Experts?

Multiple CSS and Xpath selector generators for redundancy and continued performance as the site structure changes
2. Generates short unique selectors for all element targets
Record/Replay generates code for Jest, Puppeteer, Cypress and Selenium Webdriver that you can copy and paste into your testing suites.
So testing logic can be exported from the Record/Replay environment to multiple different browsers, on your machine or in the cloud.


WHY IS IT BETTER THAN THE COMPETITION?

Everyone?

In contrast to all existing testing frameworks, Record/Replay requires ZERO CONFIGURATION and its user interface is simple and intuitive.
You can start testing your site in minutes, with no previous experience of Record/Replay or even testing websites in general.

Beginners?

1. No special installation or setup required, no testing expertise or even programming skills required, no third party plugins, no dependent libraries, it just works.

Experts?

If you have wide experience of existing testing frameworks, you know that automated functional testing can be a tricky process to configure and to maintain. 
Compared to Puppeteer, Record/Replay benefits from using the Chrome browser itself, rather than the headless version, and supports extensions like Flash.
Compared to Cypress, Record/Replay supports the use of the tab key in user interface testing, allows bandwidth / latency throttling and supports iframe interaction by default.
Compared to Selenium Webdriver, Record/Replay is less flaky (prone to erroneous fails), faster to complete tests and provides better reporting.








vs Selenium webdriver



It‚Äôs much faster than Selenium and avoids a lot of the messy configuration and flakiness that comes with trying to launch a real browser. 
No steps in the beginning asking you to download specific versions of the selenium server jar, geckodriver, chromedriver etc which is both fiddly and error prone. 
DOCUMENTATION IS AWFUL!!!

One really awesome thing about testcafe is that it automatically detects JS errors that happened when the test page was executing. I suppose this is the kind of awesome you can 
attain when you reach outside of the Selenium box! I also noted that the terminal output when tests failed where quite readable/clean.


Who is non-code web-service-based automated testing best for?
Startup founders like my friend Matt, who want to save the time they normally have to spend before/after a production deploy to avoid hearing embarrassing support issues day later. üôá
Sites that change infrequently. Teams which manually deploy their code (whether via a git push heroku master, cap production deploy, or `ssh my-production-server` and `rsync`). üí™
Websites where some breakage is OK üíÅ, and not catastrophic. Marketing sites, blogs‚Äîsites without a ‚ÄúBuy Now‚Äù button and shopping cart flow. A bug on production 
might distract one person for an hour or two, but won‚Äôt block content creators or folks depending on your service to complete their daily tasks